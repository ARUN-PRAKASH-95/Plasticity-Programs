{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fb886e3eb70>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "Isotropic_stress=np.array([200,219.04,-219.04,-240])\n",
    "Kinematic_stress=np.array([200,219.04,-182.952,-202])\n",
    "Mixed_stress=np.array([200,219.04,-192.504,-225])\n",
    "strain = np.array([0.01,0.03,0.01,-0.03])\n",
    "fig,ax = plt.subplots()\n",
    "ax.plot(strain,Isotropic_stress,label=\"Isotropic hardening\")\n",
    "ax.plot(strain,Kinematic_stress,label=\"Kinematic hardening\")\n",
    "ax.plot(strain,Mixed_stress,label=\"Mixed hardening\")\n",
    "ax.legen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
